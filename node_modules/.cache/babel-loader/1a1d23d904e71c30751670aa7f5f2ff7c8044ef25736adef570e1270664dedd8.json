{"ast":null,"code":"var _jsxFileName = \"/Users/chiararebellato/Desktop/skinnaturals/src/features/shoppingCart/emailValidation/emailValidation.js\";\nimport React from \"react\";\nimport { Formik, Field, ErrorMessage, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string().email(\"Invalid email address format\").required(\"Email is required\")\n});\nconst EmailValidator = () => {\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: LoginSchema,\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      console.log(values);\n      // Simulating asynchronous operation, like an API call\n      setTimeout(() => {\n        alert(\"Form is validated! Submitting the form...\");\n        setSubmitting(false);\n      }, 1000);\n    },\n    children: props => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !props.isSubmitting ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Login Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              type: \"email\",\n              name: \"email\",\n              placeholder: \"Enter email\",\n              autoComplete: \"off\",\n              className: `mt-2 form-control ${props.touched.email && props.errors.email ? \"is-invalid\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              component: \"div\",\n              name: \"email\",\n              className: \"invalid-feedback\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              className: \"mt-3\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              type: \"password\",\n              name: \"password\",\n              placeholder: \"Enter password\",\n              className: `form-control ${props.touched.password && props.errors.password ? \"is-invalid\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              component: \"div\",\n              name: \"password\",\n              className: \"invalid-feedback\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary btn-block mt-4\",\n            disabled: props.isSubmitting,\n            children: props.isSubmitting ? \"Submitting...\" : \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Home Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 11\n  }, this);\n};\n_c = EmailValidator;\nexport default EmailValidator;\n\n/*\n\n    <fieldset>\n      <legend className=\"fs-6 text-center\">Subscribe to our newsletter and receive a surprise</legend>\n\n      <Form action='#' encType=\"text/plain\" id=\"newsletterForm\" name=\"newsletterForm\"\n        autoComplete=\"on\" noValidate >\n\n        <div className=\"form-floating\">\n\n          <Field type=\"email\" className=\"form-control rounded-0 border-0\" id=\"floatingInputNewsletter\"\n            name=\"floatingInputNewsletter\" placeholder=\"name@example.com\"\n            pattern=\"[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,}$\" required />\n          <label for=\"floatingInputNewsletter\" id=\"floatingInputLabel\">Email address</label>\n\n          <ErrorMessage name=\"floatingInputNewsletter\" component=\"div\" className='mt-2 position-absolute' />\n      {}\n        </div>\n\n        <button id=\"submitButton\" type=\"submit\" disabled={isSubmitting}>\n          <img src=\"/img/arrow-right.svg\" alt=\"Arrow right\" />\n        </button>\n\n      </Form>\n\n    </fieldset>\n\n\n        <Form enctype=\"text/plain\" id=\"newsletterForm\" name=\"newsletterForm\"\n          autocomplete=\"on\" noValidate onSubmit={handleSubmit}>\n\n          <Form.Group className=\"form-floating\" controlId=\"newsletter\">\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              class=\"form-control rounded-0 border-0\" id=\"floatingInputNewsletter\"\n              name=\"floatingInputNewsletter\" placeholder=\"name@example.com\"\n              pattern=\"[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,}$\" required\n              value={values.floatingInputNewsletter}\n              onChange={handleChange}\n              isValid={touched.floatingInputNewsletter && !errors.floatingInputNewsletter}\n            />\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n          <Button id=\"submitButton\" type=\"submit\"><img src=\"img/arrow-right.svg\" alt=\"Arrow right\" /></Button>\n        </Form>\n\n*/\nvar _c;\n$RefreshReg$(_c, \"EmailValidator\");","map":{"version":3,"names":["React","Formik","Field","ErrorMessage","Form","Yup","jsxDEV","_jsxDEV","LoginSchema","object","shape","email","string","required","EmailValidator","initialValues","password","validationSchema","onSubmit","values","setSubmitting","console","log","setTimeout","alert","children","props","isSubmitting","fileName","_jsxFileName","lineNumber","columnNumber","className","htmlFor","type","name","placeholder","autoComplete","touched","errors","component","disabled","_c","$RefreshReg$"],"sources":["/Users/chiararebellato/Desktop/skinnaturals/src/features/shoppingCart/emailValidation/emailValidation.js"],"sourcesContent":["\nimport React from \"react\";\nimport { Formik, Field, ErrorMessage, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Invalid email address format\")\n    .required(\"Email is required\"),\n});\n\nconst EmailValidator = () => {\n  return (\n\n          <Formik\n            initialValues={{\n              email: \"\",\n              password: \"\",\n            }}\n            validationSchema={LoginSchema}\n            onSubmit={(\n              values,\n              { setSubmitting }\n            ) => {\n              console.log(values);\n              // Simulating asynchronous operation, like an API call\n              setTimeout(() => {\n                alert(\n                  \"Form is validated! Submitting the form...\"\n                );\n                setSubmitting(false);\n              }, 1000);\n            }}\n          >\n            {(props) => (\n              <div>\n\n                    {!props.isSubmitting ? (\n                      <div>\n                        <h1>\n                          Login\n                          Page\n                        </h1>{\" \"}\n                        <Form>\n                          <div className=\"form-group\">\n                            <label htmlFor=\"email\">\n                              Email\n                            </label>\n                            <Field\n                              type=\"email\"\n                              name=\"email\"\n                              placeholder=\"Enter email\"\n                              autoComplete=\"off\"\n                              className={`mt-2 form-control ${props\n                                .touched\n                                .email &&\n                                props\n                                  .errors\n                                  .email\n                                ? \"is-invalid\"\n                                : \"\"\n                                }`}\n                            />\n                            <ErrorMessage\n                              component=\"div\"\n                              name=\"email\"\n                              className=\"invalid-feedback\"\n                            />\n                          </div>\n\n                          <div className=\"form-group\">\n                            <label\n                              htmlFor=\"password\"\n                              className=\"mt-3\"\n                            >\n                              Password\n                            </label>\n                            <Field\n                              type=\"password\"\n                              name=\"password\"\n                              placeholder=\"Enter password\"\n                              className={`form-control ${props\n                                .touched\n                                .password &&\n                                props\n                                  .errors\n                                  .password\n                                ? \"is-invalid\"\n                                : \"\"\n                                }`}\n                            />\n                            <ErrorMessage\n                              component=\"div\"\n                              name=\"password\"\n                              className=\"invalid-feedback\"\n                            />\n                          </div>\n\n                          <button\n                            type=\"submit\"\n                            className=\"btn btn-primary btn-block mt-4\"\n                            disabled={\n                              props.isSubmitting\n                            }\n                          >\n                            {props.isSubmitting\n                              ? \"Submitting...\"\n                              : \"Submit\"}\n                          </button>\n                        </Form>\n                      </div>\n                    ) : (\n                      <h1>\n                        Home\n                        Page\n                      </h1>\n                    )}\n                  </div>\n            )}\n          </Formik>\n\n  );\n}\n\nexport default EmailValidator;\n\n\n/*\n\n    <fieldset>\n      <legend className=\"fs-6 text-center\">Subscribe to our newsletter and receive a surprise</legend>\n\n      <Form action='#' encType=\"text/plain\" id=\"newsletterForm\" name=\"newsletterForm\"\n        autoComplete=\"on\" noValidate >\n\n        <div className=\"form-floating\">\n\n          <Field type=\"email\" className=\"form-control rounded-0 border-0\" id=\"floatingInputNewsletter\"\n            name=\"floatingInputNewsletter\" placeholder=\"name@example.com\"\n            pattern=\"[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,}$\" required />\n          <label for=\"floatingInputNewsletter\" id=\"floatingInputLabel\">Email address</label>\n\n          <ErrorMessage name=\"floatingInputNewsletter\" component=\"div\" className='mt-2 position-absolute' />\n      {}\n        </div>\n\n        <button id=\"submitButton\" type=\"submit\" disabled={isSubmitting}>\n          <img src=\"/img/arrow-right.svg\" alt=\"Arrow right\" />\n        </button>\n\n      </Form>\n\n    </fieldset>\n\n\n        <Form enctype=\"text/plain\" id=\"newsletterForm\" name=\"newsletterForm\"\n          autocomplete=\"on\" noValidate onSubmit={handleSubmit}>\n\n          <Form.Group className=\"form-floating\" controlId=\"newsletter\">\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              class=\"form-control rounded-0 border-0\" id=\"floatingInputNewsletter\"\n              name=\"floatingInputNewsletter\" placeholder=\"name@example.com\"\n              pattern=\"[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,}$\" required\n              value={values.floatingInputNewsletter}\n              onChange={handleChange}\n              isValid={touched.floatingInputNewsletter && !errors.floatingInputNewsletter}\n            />\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n          <Button id=\"submitButton\" type=\"submit\"><img src=\"img/arrow-right.svg\" alt=\"Arrow right\" /></Button>\n        </Form>\n\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}