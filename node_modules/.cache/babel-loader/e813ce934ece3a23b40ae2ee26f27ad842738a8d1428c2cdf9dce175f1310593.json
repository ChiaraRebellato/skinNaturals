{"ast":null,"code":"import{Formik,Form,useField}from'formik';import*as Yup from'yup';import{useNavigate}from'react-router-dom';import'./contactForm.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const MyTextInput=_ref=>{let{label,...props}=_ref;// useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n// which we can spread on <input>. We can use field meta to show an error\n// message if the field is invalid and it has been touched (i.e. visited)\nconst[field,meta]=useField(props);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:props.id||props.name,children:label}),/*#__PURE__*/_jsx(\"input\",{className:\"text-input\",...field,...props}),meta.touched&&meta.error?/*#__PURE__*/_jsxs(\"div\",{className:\"error d-flex align-items-center mt-1\",children:[/*#__PURE__*/_jsxs(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"13\",height:\"13\",fill:\"currentColor\",className:\"bi bi-exclamation-circle me-1\",viewBox:\"0 0 16 16\",children:[/*#__PURE__*/_jsx(\"path\",{d:\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0M7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0z\"})]}),meta.error]}):null]});};const MyTextArea=_ref2=>{let{label,...props}=_ref2;// useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n// which we can spread on <input> and alse replace ErrorMessage entirely.\nconst[field,meta]=useField(props);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:props.id||props.name,children:label}),/*#__PURE__*/_jsx(\"textarea\",{className:\"text-area\",...field,...props}),meta.touched&&meta.error?/*#__PURE__*/_jsxs(\"div\",{className:\"error d-flex align-items-center mt-1\",children:[/*#__PURE__*/_jsxs(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"13\",height:\"13\",fill:\"currentColor\",className:\"bi bi-exclamation-circle me-1\",viewBox:\"0 0 16 16\",children:[/*#__PURE__*/_jsx(\"path\",{d:\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0M7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0z\"})]}),meta.error]}):null]});};const MyCheckbox=_ref3=>{let{children,...props}=_ref3;// React treats radios and checkbox inputs differently from other input types: select and textarea.\n// Formik does this too! When you specify `type` to useField(), it will\n// return the correct bag of props htmlFor you -- a `checked` prop will be included\n// in `field` alongside `name`, `value`, `onChange`, and `onBlur`\nconst[field,meta]=useField({...props,type:'checkbox'});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{className:\"checkbox-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",...field,...props}),children]}),meta.touched&&meta.error?/*#__PURE__*/_jsxs(\"div\",{className:\"error d-flex align-items-center mt-1\",children:[/*#__PURE__*/_jsxs(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"13\",height:\"13\",fill:\"currentColor\",className:\"bi bi-exclamation-circle me-1\",viewBox:\"0 0 16 16\",children:[/*#__PURE__*/_jsx(\"path\",{d:\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0M7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0z\"})]}),meta.error]}):null]});};const ContactForm=()=>{const navigate=useNavigate();return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(Formik,{initialValues:{firstName:'',email:'',acceptedTerms:false// added htmlFor our checkbox\n},validationSchema:Yup.object({firstName:Yup.string().min(2,'Too Short!').max(15,'Must be 15 characters or less').required('Required').matches(/^[aA-zZ\\s]+$/,\"Only alphabets are allowed htmlFor this field \"),email:Yup.string().email('Invalid email address').required('Required'),acceptedTerms:Yup.boolean().required('Required').oneOf([true],'You must accept the terms and conditions.'),msg:Yup.string().required('Required')}),onSubmit:()=>{setTimeout(()=>{navigate(\"/redirect\",{state:{isSent:true}});},400);},children:/*#__PURE__*/_jsxs(\"fieldset\",{children:[/*#__PURE__*/_jsx(\"legend\",{className:\"fs-5 fw-bold text-center\",children:\"Leave a message\"}),/*#__PURE__*/_jsxs(Form,{encType:\"text/plain\",id:\"messageForm\",name:\"messageForm\",autoComplete:\"on\",noValidate:true,\"data-netlify\":\"true\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-floating mt-5 mb-4\",children:[/*#__PURE__*/_jsx(MyTextInput,{className:\"form-control rounded-0 border-0 border-bottom\",name:\"firstName\",type:\"text\",pattern:\"^[a-zA-Z]+\",required:true,autoFocus:true,autoComplete:\"given-name\",\"aria-required\":\"true\",placeholder:\"Your Name\"}),/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"name\",children:[\"Name\",/*#__PURE__*/_jsx(\"sup\",{children:\"*\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-floating mb-4\",children:[/*#__PURE__*/_jsx(MyTextInput,{className:\"form-control rounded-0 border-0 border-bottom\",name:\"email\",type:\"email\",placeholder:\"name@example.com\",pattern:\"[a-z0-9._%+\\\\-]+@[a-z0-9.\\\\-]+\\\\.[a-z]{2,}$\",required:true,autoComplete:\"email\",\"aria-required\":\"true\"}),/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"email\",children:[\"Email address\",/*#__PURE__*/_jsx(\"sup\",{children:\"*\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-floating mb-4\",children:[/*#__PURE__*/_jsx(MyTextArea,{className:\"form-control rounded-0 h-100 border-0 border-bottom\",name:\"msg\",cols:\"5\",rows:\"2\",placeholder:\"Your Message\",required:true,\"aria-required\":\"true\"}),/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"msg\",children:[\"Message\",/*#__PURE__*/_jsx(\"sup\",{children:\"*\"})]})]}),/*#__PURE__*/_jsx(MyCheckbox,{name:\"acceptedTerms\",className:\"m-1\",children:\"I accept the terms and conditions\"}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",className:\"btn border rounded-0 w-100 mt-3 mb-3\",value:\"SEND\",tabIndex:0})]})]})})});};export default ContactForm;","map":{"version":3,"names":["Formik","Form","useField","Yup","useNavigate","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","MyTextInput","_ref","label","props","field","meta","children","htmlFor","id","name","className","touched","error","xmlns","width","height","fill","viewBox","d","MyTextArea","_ref2","MyCheckbox","_ref3","type","ContactForm","navigate","initialValues","firstName","email","acceptedTerms","validationSchema","object","string","min","max","required","matches","boolean","oneOf","msg","onSubmit","setTimeout","state","isSent","encType","autoComplete","noValidate","pattern","autoFocus","placeholder","cols","rows","value","tabIndex"],"sources":["/Users/chiararebellato/Desktop/Corsi/CodeAcademy/Progetti/react/skinnaturals/src/features/contactForm/contactForm.js"],"sourcesContent":["import { Formik, Form, useField } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport './contactForm.css'\n\nconst MyTextInput = ({ label, ...props }) => {\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input>. We can use field meta to show an error\n    // message if the field is invalid and it has been touched (i.e. visited)\n    const [field, meta] = useField(props);\n    return (\n        <>\n            <label htmlFor={props.id || props.name}>{label}</label>\n            <input className=\"text-input\" {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <div className=\"error d-flex align-items-center mt-1\">\n\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\" fill=\"currentColor\" className=\"bi bi-exclamation-circle me-1\" viewBox=\"0 0 16 16\">\n                        <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16\" />\n                        <path d=\"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0M7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0z\" />\n                    </svg>\n\n                    {meta.error}\n\n                </div>\n            ) : null}\n        </>\n    );\n};\n\nconst MyTextArea = ({ label, ...props }) => {\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\n    const [field, meta] = useField(props);\n    return (\n        <>\n            <label htmlFor={props.id || props.name}>{label}</label>\n            <textarea className=\"text-area\" {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <div className=\"error d-flex align-items-center mt-1\">\n\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\" fill=\"currentColor\" className=\"bi bi-exclamation-circle me-1\" viewBox=\"0 0 16 16\">\n                        <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16\" />\n                        <path d=\"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0M7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0z\" />\n                    </svg>\n\n                    {meta.error}\n\n                </div>\n            ) : null}\n        </>\n    );\n};\n\nconst MyCheckbox = ({ children, ...props }) => {\n    // React treats radios and checkbox inputs differently from other input types: select and textarea.\n    // Formik does this too! When you specify `type` to useField(), it will\n    // return the correct bag of props htmlFor you -- a `checked` prop will be included\n    // in `field` alongside `name`, `value`, `onChange`, and `onBlur`\n    const [field, meta] = useField({ ...props, type: 'checkbox' });\n    return (\n        <div>\n            <label className=\"checkbox-input\">\n                <input type=\"checkbox\" {...field} {...props} />\n                {children}\n            </label>\n            {meta.touched && meta.error ? (\n                <div className=\"error d-flex align-items-center mt-1\">\n\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\" fill=\"currentColor\" className=\"bi bi-exclamation-circle me-1\" viewBox=\"0 0 16 16\">\n                        <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16\" />\n                        <path d=\"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0M7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0z\" />\n                    </svg>\n\n                    {meta.error}\n\n                </div>\n            ) : null}\n        </div>\n    );\n};\n\n\nconst ContactForm = () => {\n\n    const navigate = useNavigate();\n\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    firstName: '',\n                    email: '',\n                    acceptedTerms: false, // added htmlFor our checkbox\n                }}\n                validationSchema={Yup.object({\n                    firstName: Yup.string()\n                        .min(2, 'Too Short!')\n                        .max(15, 'Must be 15 characters or less')\n                        .required('Required')\n                        .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed htmlFor this field \"),\n                    email: Yup.string()\n                        .email('Invalid email address')\n                        .required('Required'),\n                    acceptedTerms: Yup.boolean()\n                        .required('Required')\n                        .oneOf([true], 'You must accept the terms and conditions.'),\n                    msg: Yup.string()\n                        .required('Required')\n                })}\n                onSubmit={() => {\n                    setTimeout(() => {\n                        navigate(\"/redirect\", {\n                            state: {\n                                isSent: true\n                            }\n                        }\n                        );\n                    }, 400);\n\n                }}\n            >\n                <fieldset>\n                    <legend className=\"fs-5 fw-bold text-center\">Leave a message</legend>\n\n                    <Form encType=\"text/plain\" id=\"messageForm\" name=\"messageForm\" autoComplete=\"on\" noValidate data-netlify=\"true\">\n\n                        <div className=\"form-floating mt-5 mb-4\">\n                            <MyTextInput className=\"form-control rounded-0 border-0 border-bottom\"\n                                name=\"firstName\"\n                                type=\"text\"\n                                pattern=\"^[a-zA-Z]+\"\n                                required\n                                autoFocus\n                                autoComplete=\"given-name\"\n                                aria-required=\"true\"\n                                placeholder=\"Your Name\"\n                            />\n                            <label htmlFor=\"name\">Name<sup>*</sup></label>\n\n                        </div>\n\n                        <div className=\"form-floating mb-4\">\n                            <MyTextInput className=\"form-control rounded-0 border-0 border-bottom\"\n                                name=\"email\"\n                                type=\"email\"\n                                placeholder=\"name@example.com\"\n                                pattern=\"[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,}$\"\n                                required\n                                autoComplete=\"email\"\n                                aria-required=\"true\"\n                            />\n                            <label htmlFor=\"email\">Email address<sup>*</sup></label>\n\n                        </div>\n\n                        <div className=\"form-floating mb-4\">\n                            <MyTextArea\n                                className=\"form-control rounded-0 h-100 border-0 border-bottom\"\n                                name=\"msg\"\n                                cols=\"5\"\n                                rows=\"2\"\n                                placeholder=\"Your Message\"\n                                required\n                                aria-required=\"true\"\n                            ></MyTextArea>\n                            <label htmlFor=\"msg\">Message<sup>*</sup></label>\n\n                        </div>\n\n                        <MyCheckbox name=\"acceptedTerms\" className='m-1'>\n                            I accept the terms and conditions\n                        </MyCheckbox>\n\n                        <input\n                            type=\"submit\"\n                            className=\"btn border rounded-0 w-100 mt-3 mb-3\"\n                            value=\"SEND\"\n                            tabIndex={0}\n                        />\n\n                    </Form>\n                </fieldset>\n            </Formik>\n        </>\n    );\n};\n\nexport default ContactForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}